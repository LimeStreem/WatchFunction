//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.34014
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Functions.PrefabController;
using UnityEditor;
using UnityEngine;
using Random = UnityEngine.Random;


namespace AssemblyCSharp
{
		public class LinearFunction:IFunction
		{

            

		private float A;

		private float B;

		private bool IsNegative;

		public LinearFunction ()
				{
				}
		#region implemented abstract members of IFunction

		    public override void Refresh()
		    {
                A = Random.Range(1, 3)*(Random.Range (0,1)*2-1);
				B = Random.Range(0, 5)*(A > 0 ? -1 : 1);
				IsNegative = Random.Range (0, (A > 0 ? 3 : 1)) != 0 ? true : false;
		    }

		    public override void DrawGraph (float time)
		{

		}

		    public override void BeginDraw(GameManager gameManager)
		    {

		        var gameObject = FunctionPrefabContainer.instance.LinearGameObject;
                var controller = gameObject.GetComponent<LinearFunctionController>();
                controller.A = A;
                controller.B = B;
		        controller.IsNegative = IsNegative;
		        gameManager.BasicGraphTarget.ChangeGameObject(gameObject);

		    }

		    private float calcFunc(float x)
		{
			return A * x + B;
		}

		public override bool IsHit (Vector2 player)
		{
		    if (IsNegative)
		    {
		        return calcFunc(player.x) > player.y;
		    }
		    else
		    {
                return calcFunc(player.x) < player.y;
		    }
		}

		public override string functionName {
			get {
				return "LinearFunction";
			}
		}

		public override int functionLevel {
			get {
				return 1;
			}
		}

		    public override float waitingTimeInSecound
		    {
		        get { return 3; }
		    }

		    public override void DrawFormula(GameManager gameManager)
		    {

			gameManager.BasicFormulaTarget.text = string.Format("y");
			gameManager.BasicFormulaTarget.text += IsNegative ? string.Format ("<") : string.Format (">");
			if (A != 1) 
			{
				if(A != -1)
				{
					gameManager.BasicFormulaTarget.text += string.Format ("{0}", A);
				}
				else
				{
					gameManager.BasicFormulaTarget.text += string.Format ("-");
				}
			}
			gameManager.BasicFormulaTarget.text += string.Format ("x");
			if (B > 0)
			{
				gameManager.BasicFormulaTarget.text += string.Format ("+{0}", B);
			} 
			else if (B < 0) 
			{
				gameManager.BasicFormulaTarget.text += string.Format ("{0}", B);
			} 

                //gameManager.BasicFormulaTarget.text = IsNegative ? string.Format("y<{0}x+{1}", A, B) : string.Format("y>{0}x+{1}", A, B);
		    }

		    #endregion


		}
}

